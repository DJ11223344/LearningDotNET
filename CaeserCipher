using System;
using System.Windows;
using Microsoft.Win32;
using System.IO;
using System.Text.RegularExpressions;

namespace CaeserCipherWPF
{


    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        

        public MainWindow()
        {
            InitializeComponent();
            
        }

        #region Event Handlers
        
        private void encryptBtn_Click(object sender, RoutedEventArgs e)
        {
            string input = inputBox.Text;
            int ComboBoxKey = Convert.ToInt32(cipherKeyCombo.SelectedValue);

            CaeserCipher c = new CaeserCipher(input, ComboBoxKey);
            resultBox.Text = c.EncyptionMessage();
        }
        
        private void decryptBtn_Click(object sender, RoutedEventArgs e)
        {
            string input = inputBox.Text;
            int ComboBoxKey = Convert.ToInt32(cipherKeyCombo.SelectedValue);

            CaeserCipher c = new CaeserCipher(input, ComboBoxKey);
            resultBox.Text = c.DecyptionMessage();
        }

        private void helpBtn_Click(object sender, RoutedEventArgs e)
        {
            inputBox.Text = "To use this application, add your text to this box. If this is text you encrypted earlier, select the cipher key you used to encrypt the text and hit decrypt. If you need to encrypt text, select the key you want to use to encrypt it. Special characters and numbers are remove, except \".\"\nYou can try the app out with this text if you like! ";
        }

        private void saveFile_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Text file (*.txt)|*.txt";

            if (resultBox.Text.Length < 1)
            {
                MessageBox.Show("There is no text to save!\n\nAdd some text and try again.", "Save Error",
                MessageBoxButton.OK,
                MessageBoxImage.Warning);
            }
            else if (saveFileDialog.ShowDialog() == true)

                File.WriteAllText(saveFileDialog.FileName, resultBox.Text);
            else
                throw new Exception("Unknown error");
        }

        private void openFile_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Text file (*.txt)|*.txt";
            
            if (openFileDialog.ShowDialog() == true)
            {
                inputBox.Text = File.ReadAllText(openFileDialog.FileName);
            }
        }
        #endregion
    }
}

    class CaeserCipher
    {

        //Properties for the CaeserCipher class
        private string TextFromTextBox { get; set; }
        private int ShiftNumber { get; set; }

        //Default constructor
        public CaeserCipher() { }

        //Constructor that takes the user input
        public CaeserCipher(string inputMessage, int cipherKey)
        {
            TextFromTextBox = RemoveSpecChars(inputMessage).ToUpper();
            ShiftNumber = cipherKey;
        }

        /// <summary>
        /// Removes special characters and numbers from the text.
        /// </summary>
        /// <param name="inputMsg">Takes string input that needs special chars removed</param>
        /// <returns></returns>
        private string RemoveSpecChars(string inputMsg)
        {
            string filteredText = Regex.Replace(inputMsg, "[^a-zA-Z.]", " ");
            return filteredText;
        }
        

        /// <summary>
        /// Takes a string, converts it to an array. 
        /// </summary>
        /// <param name="inputMessage">Takes string from text box</param>
        /// <returns></returns>
        private int[] ConvTextToIntArray(string inputMessage)
        {
            char[] textToArray = inputMessage.ToCharArray();
            int[] convCharToIntArr = new int[textToArray.Length];

            for (int i = 0; i < textToArray.Length; i++)
            {
                char letter = textToArray[i];
                convCharToIntArr[i] = letter;
            }

            return convCharToIntArr;
        }

        /// <summary>
        /// Implements the Caeser Cipher encryption by taking in the applying the key (# of shifts) and applying it to the int array. 
        /// </summary>
        /// <param name="textFromIntArr">from converted string</param>
        /// <param name="keyShift">Equal to the shift number. Use KeyShift as the input for this method</param>
        /// <returns>String as a char array</returns>
        private char[] CaeserEncryptImp(int[] textFromIntArr, int keyShift)
        {

            char[] convIntToCharArr = new char[textFromIntArr.Length];

            for (int i = 0; i < textFromIntArr.Length; i++)
            {
                if (textFromIntArr[i] == 32 || textFromIntArr[i] == 46) //Ignores spaces
                
                    continue;
                
                else if (textFromIntArr[i] + keyShift > 90)
                
                    textFromIntArr[i] = (textFromIntArr[i] - 26) + keyShift;
               
                else
                
                    textFromIntArr[i] += keyShift;
                
            }

            for (int i = 0; i < textFromIntArr.Length; i++)
            {
                convIntToCharArr[i] = (char)textFromIntArr[i];
            }

            return convIntToCharArr;
        }
        /// <summary>
        /// Implements the Caeser Cipher decryption by taking in the applying the key (# of shifts) and applying it to the int array. 
        /// </summary>
        /// <param name="textFromIntArr">int[] </param>
        /// <param name="keyShift"> int</param>
        /// <returns>char[]</returns>
        private char[] CaeserDecryptImp(int[] textFromIntArr, int keyShift)
        {

            char[] convIntToCharArr = new char[textFromIntArr.Length];

            for (int i = 0; i < textFromIntArr.Length; i++)
            {
                if (textFromIntArr[i] == 32 || textFromIntArr[i] == 46) //Ignores spaces and dots

                    continue;

                else if (textFromIntArr[i] - keyShift < 65)

                    textFromIntArr[i] = (textFromIntArr[i] + 26) - keyShift;

                else

                    textFromIntArr[i] -= keyShift;

            }

            for (int i = 0; i < textFromIntArr.Length; i++)
            {
                convIntToCharArr[i] = (char)textFromIntArr[i];
            }

            return convIntToCharArr;
        }

        /// <summary>
        /// Takes in a char array and converts it back to a string
        /// </summary>
        /// <param name="charArr">Takes the char array and converts it back to string</param>
        /// <returns></returns>
        private string CharArrToText(char[] charArr)
        {
            string charArrToText = new string(charArr); //converts the char[] to a string
            return charArrToText;
        }

        /// <summary>
        /// This method runs text through text encryption methods
        /// </summary>
        /// <returns>Encrypted string</returns>
        public string EncyptionMessage()
        {
            string encText = TextFromTextBox;
            char[] arr = CaeserEncryptImp(ConvTextToIntArray(encText), ShiftNumber);
            return CharArrToText(arr);
        }

        /// <summary>
        /// This method runs text through text decryption methods
        /// </summary>
        /// <returns>string</returns>
        public string DecyptionMessage()
        {
            string DecryptText = TextFromTextBox;
            char[] arr = CaeserDecryptImp(ConvTextToIntArray(DecryptText), ShiftNumber);
            return CharArrToText(arr);
        }
    }
    
}
